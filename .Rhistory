#need to remove control samples
no_control_taxa <- dadaset_clean(no_control_taxa, read_thresh = 1)
View(no_control_taxa)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = TRUE
)
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
#
merged1 <- dada2tools::merged
#subsets only numeric columns specifed by columns 9 through the end of the dataset.
merged_num <- data.table::as.data.table(sapply(merged1[,9:NCOL(merged1)], function(x) as.numeric(unlist((x)))))
#subsets supposedly character columns and converts them to character.
merged_chr <- merged1[,1:8]
merged_chr[] <- lapply(merged_chr, as.character)
#binds them back together again.
merged1 <- cbind(merged_chr, merged_num)
library(dplyr)
#using example sra_key from package
sra_key <- dada2tools::sra_key
#code to sort by the new sample name.
sra_key <- sra_key %>% arrange(New_Name)
head(sra_key)
#code to sort by the Run column, which is what is needed:
sra_key <- sra_key %>% arrange(Run)
head(sra_key)
#always good to check to make sure the SRR's corresponding to the sample names in the key match the SRR's in the merged dataset.
sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)]
#If they don't match, subset sra_key to SRR's in merged.
sra_key <- sra_key[sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)],]
#colnames(dataset)[leftmost_column_index:rightmost_column_index]
colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)] <- sra_key$New_Name
head(merged1[,1:20], 5)
merged_ordered <- col_reorder(merged1)
merged_ordered <- merged_ordered[, c(1:8, 38:65, 122:163, 222:250)]
head(merged_ordered[,1:20, 5])
merged_clean <- dadaset_clean(merged_ordered, read_thresh = 200)
taxa <- neg_taxa_remove(merged_clean, control_sample_columns = 37:77)
no_control_taxa <- taxa$`No Control Taxa`
#need to remove control samples
no_control_taxa <- dadaset_clean(no_control_taxa, read_thresh = 1)
types_list <- list("Amnion-Chorion" = 28, "Control" = 41, "Villous Tree" = 29)
beta_div(merged_clean, sample_types = types_list, study = "Example Study")
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over Y axis", invert_x = TRUE)
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over X axis", invert_y = TRUE)
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over Both Axes", invert_x = TRUE, invert_y = TRUE)
preheat_ab <- heatmap_prep(merged_clean, taxa_cutoff = 0, mean_ab_cutoff = TRUE)
head(preheat_ab, 5)
preheat_top10 <- heatmap_prep(merged_clean, taxa_cutoff = 10, mean_ab_cutoff = FALSE)
head(preheat_top10, 5)
#find the row index where the unclassified taxa resides.
NA_row_index <- match("NA Unclassified", merged_clean$Genus)
#look at the row classification. In this case, the Order is the lowest classification.
merged_clean[NA_row_index, 2:8]
#Replace the "NA unclassified" taxa with "{Order} Unclassified" at any step.
merged_clean$Genus[NA_row_index] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
merged_ordered$Genus[NA_row_index] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
colnames(preheat_ab)[9] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
colnames(preheat_top10)[9] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
head(preheat_ab)
allow_thumbnails <- function(x, options) {
if (!is.null(options$thumb)) {
filename <- sprintf("%s.full.pdf", strsplit(basename(x), "\\.")[[1]][1])
absolute_path <- file.path(dirname(x), filename)
# generate the full resolution pdf
pdf(absolute_path, width = options$thumb$width, height = options$thumb$height)
eval(parse(text = options$code))
dev.off()
# add an html link to the low resolution png
options$fig.link = absolute_path
}
knitr:::hook_plot_md_base(x, options)
}
knitr::knit_hooks$set(plot = allow_thumbnails)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Example Heatmap", by_percent = TRUE)
document()
filename <- sprintf("~/data/Example_Heatmap.png", strsplit(basename(x), "\\.")[[1]][1])
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
knitr::include_graphics("images/Example_Heatmap.png")
knitr::include_graphics("dada2tools/images/Example_Heatmap.png")
knitr::include_graphics("/dada2tools/images/Example_Heatmap.png")
knitr::include_graphics("/images/Example_Heatmap.png")
document()
rm(list = ls())
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
knitr::include_graphics("images/Example_Heatmap.png")
knitr::include_graphics("~/Example_Heatmap.png")
knitr::include_graphics("~/Example_Heatmap.png")
knitr::include_graphics("~\Example_Heatmap.png")
knitr::include_graphics("~/images/Example_Heatmap.png")
knitr::include_graphics(~/images/Example_Heatmap.png)
knitr::include_graphics(Example_Heatmap.png)
knitr::include_graphics("Example_Heatmap.png")
knitr::include_graphics("Example_Heatmap.png")
knitr::include_graphics(img)
img = 'Example_Heatmap.png'
knitr::include_graphics(img)
BiocManager::install("here")
library(here)
here::i_am("dada2tools.Rmd")
here::here("vignettes", "Example_Heatmap.png")
knit_with_parameters('~/dada2tools/vignettes/dada2tools.Rmd')
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
library(here)
![Example_Heatmap](EH)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = TRUE
)
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
#loading the example merged dataset in the package to object merged1
merged1 <- dada2tools::merged
#subsets only numeric columns specifed by columns 9 through the end of the dataset.
#If species level classification was not run, there will be only 7 taxa classifications and so the '9' should be changed to '8'.
merged_num <- data.table::as.data.table(sapply(merged1[,9:NCOL(merged1)], function(x) as.numeric(unlist((x)))))
#subsets character columns and converts them to character.
#Same as before, '8' should be changed to '7' if there is no species column.
merged_chr <- merged1[,1:8]
merged_chr[] <- lapply(merged_chr, as.character)
#binds them back together again.
merged1 <- cbind(merged_chr, merged_num)
library(dplyr)
#using example sra_key from package
sra_key <- dada2tools::sra_key
#code to sort by the new sample name.
sra_key <- sra_key %>% arrange(New_Name)
head(sra_key)
#code to sort by the Run column, which is required before renaming:
sra_key <- sra_key %>% arrange(Run)
head(sra_key)
document()
document()
document()
document()
rm(list = ls())
merged <- merged
library(dada2tools)
View('inst/extdata/Example Script.R')
View(inst/extdata/Example Script.R)
View('Example Script.R')
'inst/extdata/Example Script.R'
file.edit('inst/extdata/Example Script.R')
file.edit('inst/extdata/Example Script.R')
document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = TRUE
)
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
file.edit('inst/extdata/Example Script.R')
#loading the example merged data set in the package to object merged1
merged1 <- dada2tools::merged
#subsets only numeric columns specifed by columns 9 through the end of the data set.
#If species level classification was not run, there will be only 7 taxa classifications and so the '9' should be changed to '8'.
merged_num <- data.table::as.data.table(sapply(merged1[,9:NCOL(merged1)], function(x) as.numeric(unlist((x)))))
#subsets character columns and converts them to character.
#Same as before, '8' should be changed to '7' if there is no species column.
merged_chr <- merged1[,1:8]
merged_chr[] <- lapply(merged_chr, as.character)
#binds them back together again.
merged1 <- cbind(merged_chr, merged_num)
library(dplyr)
#using example sra_key from package
sra_key <- dada2tools::sra_key
#code to sort by the new sample name.
sra_key <- sra_key %>% arrange(New_Name)
head(sra_key)
#code to sort by the Run column, which is required before renaming:
sra_key <- sra_key %>% arrange(Run)
head(sra_key)
#It is good practice to make sure the SRR numbers corresponding to the sample names in the key match the SRR numbers in the merged data set.
sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)]
#If they don't match, subset sra_key to SRR numbers in merged.
sra_key <- sra_key[sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)],]
#Here match is just getting the column index of the leftmost numeric column and NCOL is getting the rightmost numeric column.
#colnames(data set)[leftmost_column_index:rightmost_column_index]
#For this datset numeric indices would work just as well:
#colnames(merged1)[9:250] <- sra_key$New_Name
colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)] <- sra_key$New_Name
head(merged1[,1:20], 5)
merged_ordered <- col_reorder(merged1)
merged_ordered <- merged_ordered[, c(1:8, 38:65, 122:163, 222:250)]
head(merged_ordered[,1:20, 5])
merged_clean <- dadaset_clean(merged_ordered, read_thresh = 200)
taxa <- neg_taxa_remove(merged_clean, control_sample_columns = 37:77)
no_control_taxa <- taxa$`No Control Taxa`
#need to remove control samples
no_control_taxa <- dadaset_clean(no_control_taxa, read_thresh = 1)
types_list <- list("Amnion-Chorion" = 28, "Control" = 41, "Villous Tree" = 29)
beta_div(merged_clean, sample_types = types_list, study = "Example Study")
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over Y axis", invert_x = TRUE)
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over X axis", invert_y = TRUE)
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over Both Axes", invert_x = TRUE, invert_y = TRUE)
preheat_ab <- heatmap_prep(merged_clean, taxa_cutoff = 0, mean_ab_cutoff = TRUE)
head(preheat_ab, 5)
preheat_top10 <- heatmap_prep(merged_clean, taxa_cutoff = 10, mean_ab_cutoff = FALSE)
head(preheat_top10, 5)
#find the row index where the unclassified taxa resides.
NA_row_index <- match("NA Unclassified", merged_clean$Genus)
#look at the row classification. In this case, the Order is the lowest classification.
merged_clean[NA_row_index, 2:8]
#Replace the "NA unclassified" taxa with "{Order} Unclassified" at any step.
merged_clean$Genus[NA_row_index] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
merged_ordered$Genus[NA_row_index] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
colnames(preheat_ab)[9] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
colnames(preheat_top10)[9] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
head(preheat_ab)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Example Heatmap", by_percent = TRUE)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Percent True Heatmap", by_percent = TRUE)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Percent False Heatmap", by_percent = FALSE)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Red Heatmap", by_percent = TRUE)
heatmapping(preheat_ab, scalecolor = "blue", types = types_list, title = "Blue Heatmap", by_percent = TRUE)
prebar <- barplot_prep(preheat_ab, sample_types = types_list)
prebar
prebar_shifted <- data.table::setcolorder(prebar, neworder = c(1,3,2))
prebar_shifted
barplotting(prebar_shifted, study = "Example", rt_mar = 18)
#decontam_types needs to be a named list with samples only labeled as either "sample" or "control"
decontam_types <- list("sample" = 28, "control" = 41, "sample" = 29)
decontam_prepped <- decontam_prep(merged_clean, type = decontam_types)
decontam_plots <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example")
decontam_plots$Histogram
decontam_plots$Prevalence_Plot
decontam_plots.5 <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example", thresh = 0.5)
decontam_plots.4 <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example", thresh = 0.4)
decontam_plots.3 <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example", thresh = 0.3)
decontam_plots.2 <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example", thresh = 0.2)
decontam_plots.1 <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example", thresh = 0.1)
decontam_plots.5$Prevalence_Plot
decontam_plots.4$Prevalence_Plot
decontam_plots.3$Prevalence_Plot
decontam_plots.2$Prevalence_Plot
decontam_plots.1$Prevalence_Plot
usethis::use_data(preheat_ab)
rm(list = ls())
unlink('vignettes/dada2tools_cache', recursive = TRUE)
document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = TRUE
)
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
file.edit('inst/extdata/Example_Script.R')
#loading the example merged data set in the package to object merged1
merged1 <- dada2tools::merged
#subsets only numeric columns specifed by columns 9 through the end of the data set.
#If species level classification was not run, there will be only 7 taxa classifications and so the '9' should be changed to '8'.
merged_num <- data.table::as.data.table(sapply(merged1[,9:NCOL(merged1)], function(x) as.numeric(unlist((x)))))
#subsets character columns and converts them to character.
#Same as before, '8' should be changed to '7' if there is no species column.
merged_chr <- merged1[,1:8]
merged_chr[] <- lapply(merged_chr, as.character)
#binds them back together again.
merged1 <- cbind(merged_chr, merged_num)
library(dplyr)
#using example sra_key from package
sra_key <- dada2tools::sra_key
#code to sort by the new sample name.
sra_key <- sra_key %>% arrange(New_Name)
head(sra_key)
#code to sort by the Run column, which is required before renaming:
sra_key <- sra_key %>% arrange(Run)
head(sra_key)
#It is good practice to make sure the SRR numbers corresponding to the sample names in the key match the SRR numbers in the merged data set.
sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)]
#If they don't match, subset sra_key to SRR numbers in merged.
sra_key <- sra_key[sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)],]
#Here match is just getting the column index of the leftmost numeric column and NCOL is getting the rightmost numeric column.
#colnames(data set)[leftmost_column_index:rightmost_column_index]
#For this datset numeric indices would work just as well:
#colnames(merged1)[9:250] <- sra_key$New_Name
colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)] <- sra_key$New_Name
head(merged1[,1:20], 5)
merged_ordered <- col_reorder(merged1)
merged_ordered <- merged_ordered[, c(1:8, 38:65, 122:163, 222:250)]
head(merged_ordered[,1:20, 5])
merged_clean <- dadaset_clean(merged_ordered, read_thresh = 200)
taxa <- neg_taxa_remove(merged_clean, control_sample_columns = 37:77)
no_control_taxa <- taxa$`No Control Taxa`
#need to remove control samples
no_control_taxa <- dadaset_clean(no_control_taxa, read_thresh = 1)
types_list <- list("Amnion-Chorion" = 28, "Control" = 41, "Villous Tree" = 29)
beta_div(merged_clean, sample_types = types_list, study = "Example Study")
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over Y axis", invert_x = TRUE)
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over X axis", invert_y = TRUE)
beta_div(merged_clean, sample_types = types_list, study = "Inverted Over Both Axes", invert_x = TRUE, invert_y = TRUE)
preheat_ab <- heatmap_prep(merged_clean, taxa_cutoff = 0, mean_ab_cutoff = TRUE)
head(preheat_ab, 5)
preheat_top10 <- heatmap_prep(merged_clean, taxa_cutoff = 10, mean_ab_cutoff = FALSE)
head(preheat_top10, 5)
#find the row index where the unclassified taxa resides.
NA_row_index <- match("NA Unclassified", merged_clean$Genus)
#look at the row classification. In this case, the Order is the lowest classification.
merged_clean[NA_row_index, 2:8]
#Replace the "NA unclassified" taxa with "{Order} Unclassified" at any step.
merged_clean$Genus[NA_row_index] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
merged_ordered$Genus[NA_row_index] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
colnames(preheat_ab)[9] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
colnames(preheat_top10)[9] <- paste(merged_clean$Order[NA_row_index], "Unclassified")
head(preheat_ab)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Example Heatmap", by_percent = TRUE)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Percent True Heatmap", by_percent = TRUE)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Percent False Heatmap", by_percent = FALSE)
heatmapping(preheat_ab, scalecolor = "red", types = types_list, title = "Red Heatmap", by_percent = TRUE)
heatmapping(preheat_ab, scalecolor = "blue", types = types_list, title = "Blue Heatmap", by_percent = TRUE)
prebar <- barplot_prep(preheat_ab, sample_types = types_list)
prebar
prebar_shifted <- data.table::setcolorder(prebar, neworder = c(1,3,2))
prebar_shifted
barplotting(prebar_shifted, study = "Example", rt_mar = 18)
#decontam_types needs to be a named list with samples only labeled as either "sample" or "control"
decontam_types <- list("sample" = 28, "control" = 41, "sample" = 29)
decontam_prepped <- decontam_prep(merged_clean, type = decontam_types)
decontam_plots <- decontam_histo_prev_plots(decontam_prepped, study_name = "Example")
decontam_plots$Histogram
decontam_plots$Prevalence_Plot
usethis::use_data(merged_clean)
View(merged_clean)
rm(list = ls)()
rm(list = ls())
document()
merged_clean
library(dada2tools)
merged_clean
merged_clean <- merged_clean
preheat_ab <- preheat_ab
View(preheat_ab)
rm(list = ls())
document()
library(dada2tools)
View(preheat_ab)
document()
document()
library(dada2tools)
document()
document()
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
cache = TRUE
)
library(dada2tools)
library(data.table)
library(dplyr)
library(vegan)
library(ecodist)
library(gifski)
#file.edit('inst/extdata/Example_Script.R')
#loading the example merged data set in the package to object merged1
merged1 <- dada2tools::merged
#subsets only numeric columns specifed by columns 9 through the end of the data set.
#If species level classification was not run, there will be only 7 taxa classifications and so the '9' should be changed to '8'.
merged_num <- data.table::as.data.table(sapply(merged1[,9:NCOL(merged1)], function(x) as.numeric(unlist((x)))))
#subsets character columns and converts them to character.
#Same as before, '8' should be changed to '7' if there is no species column.
merged_chr <- merged1[,1:8]
merged_chr[] <- lapply(merged_chr, as.character)
#binds them back together again.
merged1 <- cbind(merged_chr, merged_num)
library(dplyr)
#using example sra_key from package
sra_key <- dada2tools::sra_key
#code to sort by the new sample name.
sra_key <- sra_key %>% arrange(New_Name)
head(sra_key)
#code to sort by the Run column, which is required before renaming:
sra_key <- sra_key %>% arrange(Run)
head(sra_key)
#It is good practice to make sure the SRR numbers corresponding to the sample names in the key match the SRR numbers in the merged data set.
sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)]
#If they don't match, subset sra_key to SRR numbers in merged.
sra_key <- sra_key[sra_key$Run %in% colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)],]
#Here match is just getting the column index of the leftmost numeric column and NCOL is getting the rightmost numeric column.
#colnames(data set)[leftmost_column_index:rightmost_column_index]
#For this datset numeric indices would work just as well:
#colnames(merged1)[9:250] <- sra_key$New_Name
colnames(merged1)[match(TRUE, sapply(merged1, is.numeric)):NCOL(merged1)] <- sra_key$New_Name
head(merged1[,1:20], 5)
merged_ordered <- col_reorder(merged1)
merged_ordered <- merged_ordered[, c(1:8, 38:65, 122:163, 222:250)]
head(merged_ordered[,1:20, 5])
merged_clean <- dadaset_clean(merged_ordered, read_thresh = 200)
View(merged_clean)
library(dada2tools)
merged_clean <- merged_clean
View(merged_clean)
devtools::document()
devtools::document()
library(dada2tools)
devtools::document()
library(dada2tools)
devtools::document()
library(dada2tools)
library(dada2tools)
vignette(dada2tools)
vignette("dada2tools")
library(dada2tools)
library(dada2tools)
merged <- merged
length(is.numeric(merged))
length(sapply(merged, is.numeric))
length(sapply(merged, is.numeric) == TRUE)
length(subset(sapply(merged, is.numeric), isTRUE))
sum(sapply(merged, is.numeric))
library(dada2tools)
devtools::document()
library(dada2tools)
library(devtools)
use_gpl3_license()
use_gpl3_license(name = "Jonathan Panzer")
document()
library(dada2tools)
add_pkg_versions <- function(pkg=".",
fields=c("Depends", "Imports", "LinkingTo", "Suggests")) {
require(purrr)
walk(c("dplyr", "tools", "stringi", "devtools"), require, character.only=TRUE)
stopifnot(is_scalar_character(pkg), pkg != "")
fields <- match.arg(fields, c("Depends", "Imports", "LinkingTo", "Suggests"),
several.ok=TRUE)
avail <- as_data_frame(available.packages())
if (pkg == ".") {
pkg_deps <- unclass(as_data_frame(read.dcf(file.path(package_file(), "DESCRIPTION"))))
pkg <- pkg_deps$Package
map(fields, ~stri_split_lines(pkg_deps[[.]])) %>%
map(function(x) {
if (length(x) > 0) {
unlist(x) %>%
stri_replace_all_regex(" \\(.*$|,", "") %>%
discard(`%in%`, c("", "R"))
} else { x }
}) -> pkg_deps
names(pkg_deps) <- fields
} else {
pkg_deps <- map(fields, ~flatten_chr((package_dependencies(pkg,  which=.))))
names(pkg_deps) <- fields
}
pkg_deps <- discard(pkg_deps, function(x) {length(x)==0})
map(pkg_deps, function(x) {
non_base <- filter(avail, Package %in% x)
base <- setdiff(x, non_base$Package)
non_base %>%
mutate(pv=sprintf("%s (>= %s)", Package, Version)) %>%
select(pv) %>%
flatten_chr() -> pkg_plus_version
sort(c(pkg_plus_version, base))
}) -> pkg_deps
cat("Package: ", pkg, "\n", sep="")
walk(names(pkg_deps), function(x) {
cat(x, ":\n", sep="")
sprintf("    %s", pkg_deps[[x]]) %>%
paste0(collapse=",\n") %>%
cat()
cat("\n")
})
}
add_pkg_versions()
library(ComplexHeatmap)
library(decontam)
library(grid)
library(phyloseq)
add_pkg_versions()
package_version(ComplexHeatmap)
package_version("ComplexHeatmap")
packageVersion("ComplexHeatmap")
packageVersion("decontam")
packageVersion("grid")
packageVersion("phyloseq")
packageVersion("RColorBrewer")
packageVersion("vegan")
document()
document()
library(dada2tools)
file.exists("~/.ssh/id_rsa.pub")
